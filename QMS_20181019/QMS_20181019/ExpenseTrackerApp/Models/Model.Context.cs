//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExpenseTrackerApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBONLINETESTEntities : DbContext
    {
        public DBONLINETESTEntities()
            : base("name=DBONLINETESTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<tblAssignExam_ToAgent> tblAssignExam_ToAgent { get; set; }
        public virtual DbSet<tblQuestion> tblQuestions { get; set; }
        public virtual DbSet<tblQuestionType> tblQuestionTypes { get; set; }
        public virtual DbSet<tblQuiz> tblQuizs { get; set; }
        public virtual DbSet<tblResult> tblResults { get; set; }
        public virtual DbSet<tblSubject> tblSubjects { get; set; }
        public virtual DbSet<tblTestCategory> tblTestCategories { get; set; }
        public virtual DbSet<tblTestSetting> tblTestSettings { get; set; }
        public virtual DbSet<tblUserAnswer> tblUserAnswers { get; set; }
        public virtual DbSet<tblUserDetail> tblUserDetails { get; set; }
        public virtual DbSet<tblUserForm> tblUserForms { get; set; }
        public virtual DbSet<tblUserPermission> tblUserPermissions { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblAdminDetail> tblAdminDetails { get; set; }
        public virtual DbSet<tblCategoryMapping> tblCategoryMappings { get; set; }
        public virtual DbSet<tblSecretQuestion> tblSecretQuestions { get; set; }
        public virtual DbSet<tblUserAnswers_Latest> tblUserAnswers_Latest { get; set; }
        public virtual DbSet<tblUserRole> tblUserRoles { get; set; }
        public virtual DbSet<T1> T1 { get; set; }
    
        [DbFunction("DBONLINETESTEntities", "CSVtoTable")]
        public virtual IQueryable<CSVtoTable_Result> CSVtoTable(string lIST, string delimeter)
        {
            var lISTParameter = lIST != null ?
                new ObjectParameter("LIST", lIST) :
                new ObjectParameter("LIST", typeof(string));
    
            var delimeterParameter = delimeter != null ?
                new ObjectParameter("Delimeter", delimeter) :
                new ObjectParameter("Delimeter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CSVtoTable_Result>("[DBONLINETESTEntities].[CSVtoTable](@LIST, @Delimeter)", lISTParameter, delimeterParameter);
        }
    
        [DbFunction("DBONLINETESTEntities", "Split1")]
        public virtual IQueryable<Split1_Result> Split1(string input)
        {
            var inputParameter = input != null ?
                new ObjectParameter("input", input) :
                new ObjectParameter("input", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split1_Result>("[DBONLINETESTEntities].[Split1](@input)", inputParameter);
        }
    
        public virtual int addQuestion(string questionType, string category, string question, string optionA, string optionB, string optionC, string optionD, string answer)
        {
            var questionTypeParameter = questionType != null ?
                new ObjectParameter("QuestionType", questionType) :
                new ObjectParameter("QuestionType", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var optionAParameter = optionA != null ?
                new ObjectParameter("OptionA", optionA) :
                new ObjectParameter("OptionA", typeof(string));
    
            var optionBParameter = optionB != null ?
                new ObjectParameter("OptionB", optionB) :
                new ObjectParameter("OptionB", typeof(string));
    
            var optionCParameter = optionC != null ?
                new ObjectParameter("OptionC", optionC) :
                new ObjectParameter("OptionC", typeof(string));
    
            var optionDParameter = optionD != null ?
                new ObjectParameter("OptionD", optionD) :
                new ObjectParameter("OptionD", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addQuestion", questionTypeParameter, categoryParameter, questionParameter, optionAParameter, optionBParameter, optionCParameter, optionDParameter, answerParameter);
        }
    
        public virtual int addQuiz(string quizName, Nullable<int> totalQuestions, Nullable<int> timeAllocated, Nullable<int> passingScore, string subjects, Nullable<int> catID)
        {
            var quizNameParameter = quizName != null ?
                new ObjectParameter("QuizName", quizName) :
                new ObjectParameter("QuizName", typeof(string));
    
            var totalQuestionsParameter = totalQuestions.HasValue ?
                new ObjectParameter("TotalQuestions", totalQuestions) :
                new ObjectParameter("TotalQuestions", typeof(int));
    
            var timeAllocatedParameter = timeAllocated.HasValue ?
                new ObjectParameter("TimeAllocated", timeAllocated) :
                new ObjectParameter("TimeAllocated", typeof(int));
    
            var passingScoreParameter = passingScore.HasValue ?
                new ObjectParameter("PassingScore", passingScore) :
                new ObjectParameter("PassingScore", typeof(int));
    
            var subjectsParameter = subjects != null ?
                new ObjectParameter("Subjects", subjects) :
                new ObjectParameter("Subjects", typeof(string));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addQuiz", quizNameParameter, totalQuestionsParameter, timeAllocatedParameter, passingScoreParameter, subjectsParameter, catIDParameter);
        }
    
        public virtual int addSignUpUser(string userName, string firstName, string lastName, string password, string email, string phoneNumber, string secretQuestion, string secretAnswer, Nullable<int> role)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secretQuestionParameter = secretQuestion != null ?
                new ObjectParameter("SecretQuestion", secretQuestion) :
                new ObjectParameter("SecretQuestion", typeof(string));
    
            var secretAnswerParameter = secretAnswer != null ?
                new ObjectParameter("SecretAnswer", secretAnswer) :
                new ObjectParameter("SecretAnswer", typeof(string));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addSignUpUser", userNameParameter, firstNameParameter, lastNameParameter, passwordParameter, emailParameter, phoneNumberParameter, secretQuestionParameter, secretAnswerParameter, roleParameter);
        }
    
        public virtual int addSubject(string subjectName, string category, Nullable<int> activeF)
        {
            var subjectNameParameter = subjectName != null ?
                new ObjectParameter("SubjectName", subjectName) :
                new ObjectParameter("SubjectName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var activeFParameter = activeF.HasValue ?
                new ObjectParameter("ActiveF", activeF) :
                new ObjectParameter("ActiveF", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addSubject", subjectNameParameter, categoryParameter, activeFParameter);
        }
    
        public virtual int addUser(string userName, string firstName, string lastName, string password, string email, string phoneNumber, string secretQuestion, string secretAnswer, Nullable<int> role)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secretQuestionParameter = secretQuestion != null ?
                new ObjectParameter("SecretQuestion", secretQuestion) :
                new ObjectParameter("SecretQuestion", typeof(string));
    
            var secretAnswerParameter = secretAnswer != null ?
                new ObjectParameter("SecretAnswer", secretAnswer) :
                new ObjectParameter("SecretAnswer", typeof(string));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addUser", userNameParameter, firstNameParameter, lastNameParameter, passwordParameter, emailParameter, phoneNumberParameter, secretQuestionParameter, secretAnswerParameter, roleParameter);
        }
    
        public virtual int approveUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("approveUser", userIdParameter);
        }
    
        public virtual int assignQuizToAgent(Nullable<int> quizId, Nullable<int> teacherId, string expireDate, string agents)
        {
            var quizIdParameter = quizId.HasValue ?
                new ObjectParameter("QuizId", quizId) :
                new ObjectParameter("QuizId", typeof(int));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var expireDateParameter = expireDate != null ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(string));
    
            var agentsParameter = agents != null ?
                new ObjectParameter("Agents", agents) :
                new ObjectParameter("Agents", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("assignQuizToAgent", quizIdParameter, teacherIdParameter, expireDateParameter, agentsParameter);
        }
    
        public virtual ObjectResult<string> convertToTable(string inputValue)
        {
            var inputValueParameter = inputValue != null ?
                new ObjectParameter("InputValue", inputValue) :
                new ObjectParameter("InputValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("convertToTable", inputValueParameter);
        }
    
        public virtual int deleteAssignedQuiz(Nullable<int> assignID)
        {
            var assignIDParameter = assignID.HasValue ?
                new ObjectParameter("AssignID", assignID) :
                new ObjectParameter("AssignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteAssignedQuiz", assignIDParameter);
        }
    
        public virtual int deleteQuestion(Nullable<int> qId)
        {
            var qIdParameter = qId.HasValue ?
                new ObjectParameter("QId", qId) :
                new ObjectParameter("QId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteQuestion", qIdParameter);
        }
    
        public virtual int deleteQuiz(Nullable<int> quizId)
        {
            var quizIdParameter = quizId.HasValue ?
                new ObjectParameter("QuizId", quizId) :
                new ObjectParameter("QuizId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteQuiz", quizIdParameter);
        }
    
        public virtual int deleteSubject(Nullable<int> sId)
        {
            var sIdParameter = sId.HasValue ?
                new ObjectParameter("SId", sId) :
                new ObjectParameter("SId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteSubject", sIdParameter);
        }
    
        public virtual int deleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteUser", userIdParameter);
        }
    
        public virtual int editAssignedQuiz(string expireDate, Nullable<int> assignID)
        {
            var expireDateParameter = expireDate != null ?
                new ObjectParameter("ExpireDate", expireDate) :
                new ObjectParameter("ExpireDate", typeof(string));
    
            var assignIDParameter = assignID.HasValue ?
                new ObjectParameter("AssignID", assignID) :
                new ObjectParameter("AssignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editAssignedQuiz", expireDateParameter, assignIDParameter);
        }
    
        public virtual int editQuestion(string questionType, string category, string question, string optionA, string optionB, string optionC, string optionD, string answer, Nullable<int> serialNumber)
        {
            var questionTypeParameter = questionType != null ?
                new ObjectParameter("QuestionType", questionType) :
                new ObjectParameter("QuestionType", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var optionAParameter = optionA != null ?
                new ObjectParameter("OptionA", optionA) :
                new ObjectParameter("OptionA", typeof(string));
    
            var optionBParameter = optionB != null ?
                new ObjectParameter("OptionB", optionB) :
                new ObjectParameter("OptionB", typeof(string));
    
            var optionCParameter = optionC != null ?
                new ObjectParameter("OptionC", optionC) :
                new ObjectParameter("OptionC", typeof(string));
    
            var optionDParameter = optionD != null ?
                new ObjectParameter("OptionD", optionD) :
                new ObjectParameter("OptionD", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            var serialNumberParameter = serialNumber.HasValue ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editQuestion", questionTypeParameter, categoryParameter, questionParameter, optionAParameter, optionBParameter, optionCParameter, optionDParameter, answerParameter, serialNumberParameter);
        }
    
        public virtual int editQuiz(string quizName, Nullable<int> totalQuestions, Nullable<int> timeAllocated, Nullable<int> passingScore, string subjects, Nullable<int> catID, Nullable<int> quizID)
        {
            var quizNameParameter = quizName != null ?
                new ObjectParameter("QuizName", quizName) :
                new ObjectParameter("QuizName", typeof(string));
    
            var totalQuestionsParameter = totalQuestions.HasValue ?
                new ObjectParameter("TotalQuestions", totalQuestions) :
                new ObjectParameter("TotalQuestions", typeof(int));
    
            var timeAllocatedParameter = timeAllocated.HasValue ?
                new ObjectParameter("TimeAllocated", timeAllocated) :
                new ObjectParameter("TimeAllocated", typeof(int));
    
            var passingScoreParameter = passingScore.HasValue ?
                new ObjectParameter("PassingScore", passingScore) :
                new ObjectParameter("PassingScore", typeof(int));
    
            var subjectsParameter = subjects != null ?
                new ObjectParameter("Subjects", subjects) :
                new ObjectParameter("Subjects", typeof(string));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editQuiz", quizNameParameter, totalQuestionsParameter, timeAllocatedParameter, passingScoreParameter, subjectsParameter, catIDParameter, quizIDParameter);
        }
    
        public virtual int editSubject(string subjectName, string category, Nullable<int> activeF, Nullable<int> subjectId)
        {
            var subjectNameParameter = subjectName != null ?
                new ObjectParameter("SubjectName", subjectName) :
                new ObjectParameter("SubjectName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var activeFParameter = activeF.HasValue ?
                new ObjectParameter("ActiveF", activeF) :
                new ObjectParameter("ActiveF", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editSubject", subjectNameParameter, categoryParameter, activeFParameter, subjectIdParameter);
        }
    
        public virtual int editUser(Nullable<int> userId, string userName, string firstName, string lastName, string password, string email, string phoneNumber, string secretQuestion, string secretAnswer, string role)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var secretQuestionParameter = secretQuestion != null ?
                new ObjectParameter("SecretQuestion", secretQuestion) :
                new ObjectParameter("SecretQuestion", typeof(string));
    
            var secretAnswerParameter = secretAnswer != null ?
                new ObjectParameter("SecretAnswer", secretAnswer) :
                new ObjectParameter("SecretAnswer", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editUser", userIdParameter, userNameParameter, firstNameParameter, lastNameParameter, passwordParameter, emailParameter, phoneNumberParameter, secretQuestionParameter, secretAnswerParameter, roleParameter);
        }
    
        public virtual ObjectResult<getAgentGridData_Result> getAgentGridData(Nullable<int> uid)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAgentGridData_Result>("getAgentGridData", uidParameter);
        }
    
        public virtual ObjectResult<getAgents_Result> getAgents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAgents_Result>("getAgents");
        }
    
        public virtual ObjectResult<getAssignedData_Result> getAssignedData(Nullable<int> roleid, Nullable<int> userid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAssignedData_Result>("getAssignedData", roleidParameter, useridParameter);
        }
    
        public virtual ObjectResult<GetCompleteResults_Result> GetCompleteResults(Nullable<int> uid, Nullable<int> qid)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var qidParameter = qid.HasValue ?
                new ObjectParameter("qid", qid) :
                new ObjectParameter("qid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompleteResults_Result>("GetCompleteResults", uidParameter, qidParameter);
        }
    
        public virtual ObjectResult<getControllers_Result> getControllers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getControllers_Result>("getControllers");
        }
    
        public virtual ObjectResult<GetGraph_Result> GetGraph(Nullable<int> userID, Nullable<int> quizID, Nullable<int> assignID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var assignIDParameter = assignID.HasValue ?
                new ObjectParameter("AssignID", assignID) :
                new ObjectParameter("AssignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGraph_Result>("GetGraph", userIDParameter, quizIDParameter, assignIDParameter);
        }
    
        public virtual ObjectResult<getQuestionList_Result> getQuestionList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getQuestionList_Result>("getQuestionList");
        }
    
        public virtual ObjectResult<Nullable<int>> GetQuestionsFromSubject(string questionvalue)
        {
            var questionvalueParameter = questionvalue != null ?
                new ObjectParameter("questionvalue", questionvalue) :
                new ObjectParameter("questionvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetQuestionsFromSubject", questionvalueParameter);
        }
    
        public virtual ObjectResult<GetQuizData_Agent_Result> GetQuizData_Agent(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuizData_Agent_Result>("GetQuizData_Agent", userIdParameter);
        }
    
        public virtual ObjectResult<getQuizList_Result> getQuizList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getQuizList_Result>("getQuizList");
        }
    
        public virtual ObjectResult<GetQuizQuestions_Result> GetQuizQuestions(Nullable<int> userId, Nullable<int> quizID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQuizQuestions_Result>("GetQuizQuestions", userIdParameter, quizIDParameter);
        }
    
        public virtual ObjectResult<GetResults_Result> GetResults(Nullable<int> userID, Nullable<int> quizID, Nullable<int> assignID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var assignIDParameter = assignID.HasValue ?
                new ObjectParameter("AssignID", assignID) :
                new ObjectParameter("AssignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResults_Result>("GetResults", userIDParameter, quizIDParameter, assignIDParameter);
        }
    
        public virtual ObjectResult<GetResultsGrid_Data_Result> GetResultsGrid_Data(Nullable<int> userID, Nullable<int> quizID, Nullable<int> assignID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var assignIDParameter = assignID.HasValue ?
                new ObjectParameter("AssignID", assignID) :
                new ObjectParameter("AssignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResultsGrid_Data_Result>("GetResultsGrid_Data", userIDParameter, quizIDParameter, assignIDParameter);
        }
    
        public virtual ObjectResult<getRoles_Result> getRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getRoles_Result>("getRoles");
        }
    
        public virtual ObjectResult<getSecretQuestions_Result> getSecretQuestions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSecretQuestions_Result>("getSecretQuestions");
        }
    
        public virtual ObjectResult<getSubjects_Result> getSubjects(Nullable<int> catid)
        {
            var catidParameter = catid.HasValue ?
                new ObjectParameter("catid", catid) :
                new ObjectParameter("catid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSubjects_Result>("getSubjects", catidParameter);
        }
    
        public virtual ObjectResult<getSubjectsList_Result> getSubjectsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSubjectsList_Result>("getSubjectsList");
        }
    
        public virtual ObjectResult<getTestCategories_Result> getTestCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTestCategories_Result>("getTestCategories");
        }
    
        public virtual ObjectResult<getUserDetails_Result> getUserDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserDetails_Result>("getUserDetails");
        }
    
        public virtual ObjectResult<getUsersforApproval_Result> getUsersforApproval()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUsersforApproval_Result>("getUsersforApproval");
        }
    
        public virtual int InsertAnswers(Nullable<int> userId, Nullable<int> quizID, string question, string answer, Nullable<int> isCorrect, Nullable<int> questionid, Nullable<int> assignID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            var isCorrectParameter = isCorrect.HasValue ?
                new ObjectParameter("isCorrect", isCorrect) :
                new ObjectParameter("isCorrect", typeof(int));
    
            var questionidParameter = questionid.HasValue ?
                new ObjectParameter("questionid", questionid) :
                new ObjectParameter("questionid", typeof(int));
    
            var assignIDParameter = assignID.HasValue ?
                new ObjectParameter("AssignID", assignID) :
                new ObjectParameter("AssignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAnswers", userIdParameter, quizIDParameter, questionParameter, answerParameter, isCorrectParameter, questionidParameter, assignIDParameter);
        }
    
        public virtual int UpdateMarks(Nullable<int> quizID, Nullable<int> userId)
        {
            var quizIDParameter = quizID.HasValue ?
                new ObjectParameter("QuizID", quizID) :
                new ObjectParameter("QuizID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMarks", quizIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateTimoutStatus(Nullable<int> userID, Nullable<int> assignID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var assignIDParameter = assignID.HasValue ?
                new ObjectParameter("AssignID", assignID) :
                new ObjectParameter("AssignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateTimoutStatus", userIDParameter, assignIDParameter);
        }
    
        public virtual int uploadExcelQuestions(string subjectname, string question, string option1, string option2, string option3, string option4, string optionType, string answer)
        {
            var subjectnameParameter = subjectname != null ?
                new ObjectParameter("subjectname", subjectname) :
                new ObjectParameter("subjectname", typeof(string));
    
            var questionParameter = question != null ?
                new ObjectParameter("question", question) :
                new ObjectParameter("question", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("option1", option1) :
                new ObjectParameter("option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("option2", option2) :
                new ObjectParameter("option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("option3", option3) :
                new ObjectParameter("option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("option4", option4) :
                new ObjectParameter("option4", typeof(string));
    
            var optionTypeParameter = optionType != null ?
                new ObjectParameter("OptionType", optionType) :
                new ObjectParameter("OptionType", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uploadExcelQuestions", subjectnameParameter, questionParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, optionTypeParameter, answerParameter);
        }
    
        public virtual int uploadQuestions(string subjectname, string question, string option1, string option2, string option3, string option4, string optionType, string answer)
        {
            var subjectnameParameter = subjectname != null ?
                new ObjectParameter("subjectname", subjectname) :
                new ObjectParameter("subjectname", typeof(string));
    
            var questionParameter = question != null ?
                new ObjectParameter("question", question) :
                new ObjectParameter("question", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("option1", option1) :
                new ObjectParameter("option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("option2", option2) :
                new ObjectParameter("option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("option3", option3) :
                new ObjectParameter("option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("option4", option4) :
                new ObjectParameter("option4", typeof(string));
    
            var optionTypeParameter = optionType != null ?
                new ObjectParameter("OptionType", optionType) :
                new ObjectParameter("OptionType", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uploadQuestions", subjectnameParameter, questionParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, optionTypeParameter, answerParameter);
        }
    
        public virtual int uploadQuestionsFromExcel(string subjectname, string question, string option1, string option2, string option3, string option4, string optionType, string answer)
        {
            var subjectnameParameter = subjectname != null ?
                new ObjectParameter("subjectname", subjectname) :
                new ObjectParameter("subjectname", typeof(string));
    
            var questionParameter = question != null ?
                new ObjectParameter("question", question) :
                new ObjectParameter("question", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("option1", option1) :
                new ObjectParameter("option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("option2", option2) :
                new ObjectParameter("option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("option3", option3) :
                new ObjectParameter("option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("option4", option4) :
                new ObjectParameter("option4", typeof(string));
    
            var optionTypeParameter = optionType != null ?
                new ObjectParameter("OptionType", optionType) :
                new ObjectParameter("OptionType", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uploadQuestionsFromExcel", subjectnameParameter, questionParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, optionTypeParameter, answerParameter);
        }
    
        public virtual ObjectResult<viewReport_Result> viewReport(Nullable<int> roleid, Nullable<int> userid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<viewReport_Result>("viewReport", roleidParameter, useridParameter);
        }
    
        public virtual ObjectResult<string> uploadQuestions_TEST(string subjectname, string question, string option1, string option2, string option3, string option4, string optionType, string answer)
        {
            var subjectnameParameter = subjectname != null ?
                new ObjectParameter("subjectname", subjectname) :
                new ObjectParameter("subjectname", typeof(string));
    
            var questionParameter = question != null ?
                new ObjectParameter("question", question) :
                new ObjectParameter("question", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("option1", option1) :
                new ObjectParameter("option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("option2", option2) :
                new ObjectParameter("option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("option3", option3) :
                new ObjectParameter("option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("option4", option4) :
                new ObjectParameter("option4", typeof(string));
    
            var optionTypeParameter = optionType != null ?
                new ObjectParameter("OptionType", optionType) :
                new ObjectParameter("OptionType", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uploadQuestions_TEST", subjectnameParameter, questionParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, optionTypeParameter, answerParameter);
        }
    }
}
